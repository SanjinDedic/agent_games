name: Test, Coverage and Deploy

on:
  push:
    branches:
      - main
    paths:
      - 'backend/**'
      - 'pyproject.toml'
      - 'requirements.txt'
  pull_request:
    branches:
      - main
    paths:
      - 'backend/**'
      - 'pyproject.toml'
      - 'requirements.txt'

jobs:
  test_and_coverage:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python 3.12
      uses: actions/setup-python@v3
      with:
        python-version: 3.12

    - name: Debug directory contents
      run: |
        echo "Current directory:"
        pwd
        echo "Contents:"
        ls -la
        echo "Backend directory contents:"
        ls -la backend/

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-asyncio httpx pytest-cov
        pip install -r backend/requirements.txt

    - name: Run tests with coverage
      run: |
        pytest --cov=backend --cov-report=xml --cov-report=term backend/tests/

    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v4.0.1
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        slug: SanjinDedic/agent_games
        directory: .
        flags: backend
        fail_ci_if_error: true
        verbose: true

  deploy:
    needs: test_and_coverage
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Deploy to EC2
      env:
        HOST: ${{ secrets.EC2_HOST }}
        USERNAME: ${{ secrets.EC2_USERNAME }}
        KEY: ${{ secrets.EC2_PRIVATE_KEY }}
        SERVICE_TOKEN: ${{ secrets.SERVICE_TOKEN }}
        SECRET_KEY: ${{ secrets.SECRET_KEY }}
      run: |
        mkdir -p ~/.ssh
        echo "$KEY" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh -o StrictHostKeyChecking=no $USERNAME@$HOST "bash -s" << 'ENDSSH' "$SERVICE_TOKEN" "$SECRET_KEY"
          SERVICE_TOKEN=$1
          SECRET_KEY=$2
          
          echo "Starting deployment..."
          
          # Ensure Docker is running
          if ! sudo systemctl is-active --quiet docker; then
            echo "Starting Docker service..."
            sudo systemctl start docker
          fi

          # Setup directories
          mkdir -p ~/main_application
          cd ~/main_application
          
          # Clean Docker resources but preserve critical files
          sudo docker system prune -f
          sudo docker image prune -af
          
          # Backup existing database
          if [ -f "agent_games/backend/teams.db" ]; then
            echo "Backing up existing database..."
            cp agent_games/backend/teams.db ~/teams.db.backup
          fi
          
          # Clone only backend files
          tmp_dir=$(mktemp -d)
          git clone --depth 1 --no-checkout https://github.com/SanjinDedic/agent_games.git "$tmp_dir"
          cd "$tmp_dir"
          git sparse-checkout init
          git sparse-checkout set 'backend' '__init__.py' 'pyproject.toml' 'requirements.txt'
          git checkout
          
          # Move only the backend files to the main directory
          cd ..
          
          # Remove old backend (but keep database)
          if [ -d "agent_games/backend" ]; then
            # Save database first
            if [ -f "agent_games/backend/teams.db" ]; then
              mv agent_games/backend/teams.db ~/teams.db.temp
            fi
            
            # Remove old directories but preserve any custom frontend
            rm -rf agent_games/backend agent_games/__init__.py agent_games/pyproject.toml
          else
            # If no previous installation, create directory
            mkdir -p agent_games
          fi
          
          # Copy new backend files
          cp -r "$tmp_dir/backend" agent_games/
          cp -r "$tmp_dir/__init__.py" "$tmp_dir/pyproject.toml" "$tmp_dir/requirements.txt" agent_games/
          
          # Restore database
          if [ -f "~/teams.db.temp" ]; then
            echo "Restoring database..."
            mv ~/teams.db.temp agent_games/backend/teams.db
          elif [ -f "~/teams.db.backup" ]; then
            echo "Restoring from backup..."
            cp ~/teams.db.backup agent_games/backend/teams.db
          fi
          
          # Clean up temporary directory
          rm -rf "$tmp_dir"
          
          # Move to backend directory
          cd agent_games/backend
          
          # Create/update Python 3.13 virtual environment
          if [ -d "venv" ]; then
            echo "Updating existing virtual environment..."
            rm -rf venv
          fi
          
          # Create new virtual environment with Python 3.13
          /usr/bin/python3.13 -m venv venv
          source venv/bin/activate
          
          # Verify Python version
          python_version=$(python --version)
          echo "Using $python_version"
          
          # Install dependencies
          python -m pip install --upgrade pip
          python -m pip install -r requirements.txt

          # Set up Python path - needed for imports to work correctly
          export PYTHONPATH=/home/ubuntu/main_application/agent_games
          
          # Build Docker containers
          echo "Building simulator container..."
          sudo docker build -t simulator -f docker_utils/dockerfiles/simulator.dockerfile .
          
          echo "Building validator container..."
          sudo docker build -t validator -f docker_utils/dockerfiles/validator.dockerfile .
          
          # Stop any existing containers
          sudo docker stop validator simulator || true
          sudo docker rm validator simulator || true
          
          # Start new containers with environment variables and pythonpath
          sudo docker run -d --name validator \
            --network=host \
            -v $(pwd):/agent_games/backend:ro \
            -e SERVICE_TOKEN="$SERVICE_TOKEN" \
            -e SECRET_KEY="$SECRET_KEY" \
            -e PYTHONPATH=/agent_games \
            validator

          sudo docker run -d --name simulator \
            --network=host \
            -v $(pwd):/agent_games/backend:ro \
            -e SERVICE_TOKEN="$SERVICE_TOKEN" \
            -e SECRET_KEY="$SECRET_KEY" \
            -e PYTHONPATH=/agent_games \
            simulator
            
          # Start the service with PM2
          pm2 restart ecosystem.config.js
          
          # Log container status
          echo "Docker container status:"
          sudo docker ps | grep -E 'validator|simulator'
          
          # Log disk usage after deployment
          echo "Disk usage after deployment:"
          df -h /
          
          # Log PM2 status
          pm2 list
          
          echo "Deployment completed"
        ENDSSH