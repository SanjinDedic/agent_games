name: Test, Coverage and Deploy

on:
  push:
    branches:
      - main
    paths:
      - 'backend/**'
      - 'pyproject.toml'
      - 'docker-compose.yml'
  pull_request:
    branches:
      - main
    paths:
      - 'backend/**'
      - 'pyproject.toml'
      - 'docker-compose.yml'

jobs:
  test_and_coverage:
    runs-on: ubuntu-latest
    env:
      SECRET_KEY: "github_actions_test_secret_key"
      SERVICE_TOKEN: "github_actions_test_service_token"
      TESTING: "1"
      # For testing, we use placeholder credentials
      POSTGRES_USER: "postgres"
      POSTGRES_PASSWORD: "test_db_password"
      DB_NAME: "agent_games"
      TEST_DB_NAME: "agent_games_test"
      
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python 3.12
      uses: actions/setup-python@v3
      with:
        python-version: 3.12

    - name: Ensure validation files exist for tests
      env:
        LINEUP4_VALIDATION_PLAYERS: ${{ secrets.LINEUP4_VALIDATION_PLAYERS }}
      run: |
        mkdir -p backend/games/lineup4
        echo "$LINEUP4_VALIDATION_PLAYERS" | base64 -d > backend/games/lineup4/validation_players.py
        echo "Created validation players file for tests"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-asyncio httpx pytest-cov
        pip install -r backend/requirements.txt

    - name: Set up Docker Compose
      uses: docker/setup-buildx-action@v2

    - name: Create .env file for Docker Compose
      run: |
        echo "Creating .env file for Docker Compose"
        echo "SECRET_KEY=${SECRET_KEY}" > .env
        echo "SERVICE_TOKEN=${SERVICE_TOKEN}" >> .env
        echo "POSTGRES_USER=${POSTGRES_USER}" >> .env
        echo "POSTGRES_PASSWORD=${POSTGRES_PASSWORD}" >> .env
        echo "DB_NAME=${DB_NAME}" >> .env
        echo "TEST_DB_NAME=${TEST_DB_NAME}" >> .env
        
    - name: Start Docker Compose services with test profile
      run: |
        docker compose build
        # Use the test profile to make sure postgres_test is included
        docker compose --profile test up -d
        
        echo "Waiting for services to start..."
        timeout 60s bash -c 'until docker compose ps | grep postgres_test | grep -q "healthy"; do sleep 2; echo "Waiting for postgres_test..."; done'
        timeout 60s bash -c 'until docker compose ps | grep validator | grep -q "healthy"; do sleep 2; echo "Waiting for validator..."; done'
        timeout 60s bash -c 'until docker compose ps | grep simulator | grep -q "healthy"; do sleep 2; echo "Waiting for simulator..."; done'
        
        docker compose ps

    - name: Run tests with coverage
      run: |
        export SECRET_KEY="${SECRET_KEY}"
        export SERVICE_TOKEN="${SERVICE_TOKEN}"
        export TESTING=1
        pytest --cov=backend --cov-report=xml --cov-report=term backend/tests/

    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v4.0.1
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        slug: SanjinDedic/agent_games
        directory: .
        flags: backend
        fail_ci_if_error: true
        verbose: true

    - name: Docker Compose down
      if: always()
      run: docker compose down

  deploy:
    needs: test_and_coverage
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
    
      - name: Deploy to EC2
        env:
          HOST: ${{ secrets.EC2_HOST }}
          USERNAME: ${{ secrets.EC2_USERNAME }}
          KEY: ${{ secrets.EC2_PRIVATE_KEY }}
          SERVICE_TOKEN: ${{ secrets.SERVICE_TOKEN }}
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
          LINEUP4_VALIDATION_PLAYERS: ${{ secrets.LINEUP4_VALIDATION_PLAYERS }}
          # Using the same variable names as local .env
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          DB_NAME: ${{ secrets.DB_NAME }}
          TEST_DB_NAME: ${{ secrets.TEST_DB_NAME }}
        run: |
          mkdir -p ~/.ssh
          echo "$KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh -o StrictHostKeyChecking=no $USERNAME@$HOST "bash -s" << 'ENDSSH' "$SERVICE_TOKEN" "$SECRET_KEY" "$LINEUP4_VALIDATION_PLAYERS" "$POSTGRES_USER" "$POSTGRES_PASSWORD" "$DB_NAME" "$TEST_DB_NAME"
            SERVICE_TOKEN=$1
            SECRET_KEY=$2
            LINEUP4_VALIDATION_PLAYERS=$3
            POSTGRES_USER=$4
            POSTGRES_PASSWORD=$5
            DB_NAME=$6
            TEST_DB_NAME=$7
            
            echo "Starting containerized deployment..."
            
            # Ensure Docker is running
            if ! sudo systemctl is-active --quiet docker; then
              sudo systemctl start docker
            fi
            
            # Create deployment directory if it doesn't exist
            mkdir -p ~/agent_games
            cd ~/agent_games
            
            # Create database backup before deployment
            echo "Creating database backup..."
            timestamp=$(date +%Y%m%d_%H%M%S)
            backup_dir=~/db_backups
            mkdir -p $backup_dir
            
            # Check if we have existing postgres container running
            if sudo docker ps -q -f name=agent_games-postgres-1; then
              # Create PostgreSQL database dump
              sudo docker exec agent_games-postgres-1 \
                pg_dump -U "$POSTGRES_USER" -d "$DB_NAME" > $backup_dir/agent_games_backup_$timestamp.sql
              echo "Database backup created at $backup_dir/agent_games_backup_$timestamp.sql"
              
              # Keep only the 5 most recent backups
              ls -t $backup_dir/agent_games_backup_*.sql | tail -n +6 | xargs -r rm
            else
              echo "Postgres container not running, skipping database backup"
            fi
            
            # Pull latest code - preserve .env file if it exists
            echo "Fetching latest code..."
            if [ -f ".env" ]; then
              cp .env .env.bak
            fi
            
            # Clone new code or update existing repository
            if [ -d ".git" ]; then
              git fetch --all
              git reset --hard origin/main
            else
              rm -rf .git
              git init
              git remote add origin https://github.com/SanjinDedic/agent_games.git
              git fetch --depth 1 origin main
              git checkout origin/main
            fi
            
            # Restore .env file if it existed
            if [ -f ".env.bak" ]; then
              cp .env.bak .env
              rm .env.bak
            else
              # Setup environment variables - using the exact same names as local .env
              echo "SERVICE_TOKEN=$SERVICE_TOKEN" > .env
              echo "SECRET_KEY=$SECRET_KEY" >> .env
              echo "POSTGRES_USER=$POSTGRES_USER" >> .env
              echo "POSTGRES_PASSWORD=$POSTGRES_PASSWORD" >> .env
              echo "DB_NAME=$DB_NAME" >> .env
              echo "TEST_DB_NAME=$TEST_DB_NAME" >> .env
            fi
            
            # Create lineup4 validation_players file
            mkdir -p backend/games/lineup4
            echo "$LINEUP4_VALIDATION_PLAYERS" > backend/games/lineup4/validation_players.py
            
            # Gracefully update containers to preserve volumes
            echo "Updating containers..."
            sudo docker compose pull || true
            
            # Stop containers that don't have persistent data first
            sudo docker compose stop api validator simulator
            
            # Build and restart services using prod profile
            echo "Starting services with Docker Compose using prod profile..."
            sudo docker compose build
            sudo docker compose --profile prod up -d
            
            # Verify services are running
            echo "Waiting for services to be healthy..."
            timeout 120s bash -c 'until curl -fs http://localhost:8001/health >/dev/null 2>&1; do sleep 5; echo "Waiting for validator..."; done'
            timeout 120s bash -c 'until curl -fs http://localhost:8002/health >/dev/null 2>&1; do sleep 5; echo "Waiting for simulator..."; done'
            timeout 120s bash -c 'until curl -fs http://localhost:8000/health >/dev/null 2>&1; do sleep 5; echo "Waiting for API..."; done'
            
            # Clean up unused Docker resources
            echo "Cleaning up unused Docker resources..."
            sudo docker image prune -af --filter "until=24h" --filter "label!=persist=true"
            
            # Log container status
            echo "Docker container status:"
            sudo docker compose ps
            
            echo "Deployment completed successfully"
          ENDSSH