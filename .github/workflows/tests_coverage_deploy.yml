name: Test, Coverage and Deploy

on:
  push:
    branches:
      - main
    paths:
      - 'backend/**'
      - 'pyproject.toml'
      - 'requirements.txt'
      - 'docker-compose.yml'
  pull_request:
    branches:
      - main
    paths:
      - 'backend/**'
      - 'pyproject.toml'
      - 'requirements.txt'
      - 'docker-compose.yml'

jobs:
  test_and_coverage:
    runs-on: ubuntu-latest
    env:
      # Add test environment variables 
      SECRET_KEY: "github_actions_test_secret_key"
      SERVICE_TOKEN: "github_actions_test_service_token"
      TESTING: "1"
      
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python 3.12
      uses: actions/setup-python@v3
      with:
        python-version: 3.12

    - name: Debug directory contents
      run: |
        echo "Current directory:"
        pwd
        echo "Contents:"
        ls -la
        echo "Backend directory contents:"
        ls -la backend/

    - name: Ensure validation files exist for tests
      env:
        LINEUP4_VALIDATION_PLAYERS: ${{ secrets.LINEUP4_VALIDATION_PLAYERS }}
      run: |
        mkdir -p backend/games/lineup4
        echo "$LINEUP4_VALIDATION_PLAYERS" | base64 -d > backend/games/lineup4/validation_players.py
        echo "Created validation players file for tests"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-asyncio httpx pytest-cov
        pip install -r backend/requirements.txt

    - name: Run tests with coverage
      run: |
        # Set environment variables for the tests
        export SECRET_KEY="${SECRET_KEY}"
        export SERVICE_TOKEN="${SERVICE_TOKEN}"
        export TESTING=1
        pytest --cov=backend --cov-report=xml --cov-report=term backend/tests/

    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v4.0.1
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        slug: SanjinDedic/agent_games
        directory: .
        flags: backend
        fail_ci_if_error: true
        verbose: true

  deploy:
    needs: test_and_coverage
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
    
      - name: Deploy to EC2
        env:
          HOST: ${{ secrets.EC2_HOST }}
          USERNAME: ${{ secrets.EC2_USERNAME }}
          KEY: ${{ secrets.EC2_PRIVATE_KEY }}
          SERVICE_TOKEN: ${{ secrets.SERVICE_TOKEN }}
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
          LINEUP4_VALIDATION_PLAYERS: ${{ secrets.LINEUP4_VALIDATION_PLAYERS }}
        run: |
          mkdir -p ~/.ssh
          echo "$KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh -o StrictHostKeyChecking=no $USERNAME@$HOST "bash -s" << 'ENDSSH' "$SERVICE_TOKEN" "$SECRET_KEY" "$LINEUP4_VALIDATION_PLAYERS"
            SERVICE_TOKEN=$1
            SECRET_KEY=$2
            LINEUP4_VALIDATION_PLAYERS=$3
            
            echo "Starting deployment..."
            
            # Print initial disk space
            echo "Disk space before cleanup:"
            df -h /
            
            # Aggressive cleanup
            echo "Running cleanup operations..."
            sudo find /var/log -type f -name "*.gz" -delete
            sudo find /var/log -type f -name "*.old" -delete
            sudo find /var/log -type f -name "*.1" -delete
            
            # Ensure Docker is running
            if ! sudo systemctl is-active --quiet docker; then
              echo "Starting Docker service..."
              sudo systemctl start docker
            fi
            
            # Clean Docker resources but preserve critical containers
            echo "Cleaning Docker resources..."
            sudo docker container prune -f
            sudo docker image prune -af
            sudo docker volume prune -f
            sudo docker system prune -f
    
            # Show disk space after cleanup
            echo "Disk space after cleanup:"
            df -h /
            
            # Setup directories
            mkdir -p ~/main_application
            cd ~/main_application
            
            # Backup existing database (keep only 3 latest backups)
            if [ -f "agent_games/backend/teams.db" ]; then
              echo "Backing up existing database..."
              cp agent_games/backend/teams.db ~/teams.db.backup.$(date +%Y%m%d_%H%M%S)
              find ~/ -name "teams.db.backup*" -type f -printf '%T@ %p\n' | sort -n | head -n -3 | cut -d' ' -f2- | xargs rm -f 2>/dev/null || true
            fi
            
            # Clone repository with proper sparse checkout
            echo "Cloning repository..."
            tmp_dir=$(mktemp -d)
            git clone --depth 1 --no-checkout https://github.com/SanjinDedic/agent_games.git "$tmp_dir"
            cd "$tmp_dir"
            git sparse-checkout init
            git sparse-checkout set 'backend' '__init__.py' 'pyproject.toml' 'backend/requirements.txt' 'docker-compose.yml' 'start_services.sh'
            git checkout
            
            # Save database file before overwriting
            if [ -f "/home/ubuntu/main_application/agent_games/backend/teams.db" ]; then
              echo "Saving current database..."
              mv /home/ubuntu/main_application/agent_games/backend/teams.db ~/teams.db.temp
            fi
            
            # Prepare target directory
            if [ -d "/home/ubuntu/main_application/agent_games" ]; then
              echo "Removing old backend code..."
              rm -rf /home/ubuntu/main_application/agent_games/backend
              rm -f /home/ubuntu/main_application/agent_games/__init__.py
              rm -f /home/ubuntu/main_application/agent_games/pyproject.toml
              rm -f /home/ubuntu/main_application/agent_games/docker-compose.yml
              rm -f /home/ubuntu/main_application/agent_games/start_services.sh
            else
              mkdir -p /home/ubuntu/main_application/agent_games
            fi
            
            # Copy new files
            echo "Copying new code..."
            cp -r backend /home/ubuntu/main_application/agent_games/
            cp __init__.py /home/ubuntu/main_application/agent_games/
            cp pyproject.toml /home/ubuntu/main_application/agent_games/
            cp docker-compose.yml /home/ubuntu/main_application/agent_games/
            cp start_services.sh /home/ubuntu/main_application/agent_games/
            chmod +x /home/ubuntu/main_application/agent_games/start_services.sh
            
            # If requirements.txt is in the backend subdirectory
            if [ -f "backend/requirements.txt" ]; then
              cp backend/requirements.txt /home/ubuntu/main_application/agent_games/
            fi
            
            # Restore database
            if [ -f "$HOME/teams.db.temp" ]; then
              echo "Restoring database..."
              cp ~/teams.db.temp /home/ubuntu/main_application/agent_games/backend/teams.db
              rm ~/teams.db.temp
            fi
            
            # Clean up temporary directory
            rm -rf "$tmp_dir"
            
            # Move to agent_games directory
            cd /home/ubuntu/main_application/agent_games
            
            # Create validation_players.py file for lineup4
            mkdir -p backend/games/lineup4
            echo "$LINEUP4_VALIDATION_PLAYERS" > backend/games/lineup4/validation_players.py
            
            # Setup environment variables for Docker Compose
            echo "Setting up environment variables..."
            echo "SERVICE_TOKEN=$SERVICE_TOKEN" > backend/.env
            echo "SECRET_KEY=$SECRET_KEY" >> backend/.env
            
            # Check for existing virtual environment
            if [ -d "backend/venv" ] && [ -f "backend/venv/bin/python" ]; then
              echo "Updating existing virtual environment..."
              source backend/venv/bin/activate
              python -m pip install --upgrade pip
              if [ -f "backend/requirements.txt" ]; then
                python -m pip install -r backend/requirements.txt
              fi
            else
              echo "Creating new virtual environment..."
              cd backend
              rm -rf venv
              /usr/bin/python3.13 -m venv venv
              source venv/bin/activate
              python -m pip install --upgrade pip
              if [ -f "requirements.txt" ]; then
                python -m pip install -r requirements.txt
              fi
              cd ..
            fi
            
            # Show disk space after installation
            echo "Disk space after dependency installation:"
            df -h /
            
            # Stop any existing services
            echo "Stopping existing Docker containers..."
            sudo docker compose down || true
            
            # Start services using Docker Compose
            echo "Starting services with Docker Compose..."
            export SERVICE_TOKEN="$SERVICE_TOKEN"
            export SECRET_KEY="$SECRET_KEY"
            
            sudo -E docker compose up -d
            
            # Check if services are running
            echo "Checking if services are running..."
            sudo docker compose ps
            
            # Wait for services to be healthy
            echo "Waiting for services to be healthy..."
            timeout 60s bash -c 'until curl -s http://localhost:8001/health | grep -q "healthy"; do sleep 2; done'
            timeout 60s bash -c 'until curl -s http://localhost:8002/health | grep -q "healthy"; do sleep 2; done'
            
            # Clean up unnecessary files
            find backend -name "*.pyc" -delete
            find backend -name "__pycache__" -type d -exec rm -rf {} + 2>/dev/null || true
            
            # Start the main service with PM2
            cd ~/main_application
            pm2 restart ecosystem.config.js
            
            # Log container status
            echo "Docker container status:"
            sudo docker compose ps
            
            # Log disk usage after deployment
            echo "Disk usage after deployment:"
            df -h /
            
            # Log PM2 status
            pm2 list
            
            echo "Deployment completed"
          ENDSSH