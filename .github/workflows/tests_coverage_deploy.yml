name: Test, Coverage and Deploy

on:
  push:
    branches: [main]
    paths: ['backend/**', 'pyproject.toml', 'docker-compose.yml']
  pull_request:
    branches: [main]
    paths: ['backend/**', 'pyproject.toml', 'docker-compose.yml']

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test_and_coverage:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - uses: actions/setup-python@v5
      with:
        python-version: '3.12'
        cache: 'pip'

    - name: Ensure validation files exist for tests
      env:
        LINEUP4_VALIDATION_PLAYERS: ${{ secrets.LINEUP4_VALIDATION_PLAYERS }}
      run: |
        mkdir -p backend/games/lineup4
        echo "$LINEUP4_VALIDATION_PLAYERS" | base64 -d > backend/games/lineup4/validation_players.py

    - name: Install dependencies
      run: |
        pip install pytest pytest-asyncio httpx pytest-cov
        pip install -r backend/requirements.txt

    - name: Run tests with Docker Compose
      run: |
        docker compose build
        docker compose --profile test up --wait
        docker compose exec -T api pytest --cov=backend --cov-report=xml --cov-report=term backend/tests/
      env:
        SECRET_KEY: "github_actions_test_secret_key"
        SERVICE_TOKEN: "github_actions_test_service_token"
        TESTING: "1"
        DATABASE_URL: "postgresql://postgres:test_db_password@postgres:5432/agent_games_test"
        POSTGRES_USER: "postgres"
        POSTGRES_PASSWORD: "test_db_password"
        DB_NAME: "agent_games"
        TEST_DB_NAME: "agent_games_test"

    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v4
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        flags: backend
        fail_ci_if_error: true

    - name: Cleanup
      if: always()
      run: docker compose down --volumes

  deploy:
    needs: test_and_coverage
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    
    - uses: webfactory/ssh-agent@v0.9.0
      with:
        ssh-private-key: ${{ secrets.EC2_PRIVATE_KEY }}

    - name: Deploy to EC2
      run: |
        ssh -o StrictHostKeyChecking=no ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} << 'ENDSSH'
          set -e
          
          echo "Starting deployment..."
          
          # Ensure Docker is running
          sudo systemctl start docker || true
          
          # Setup deployment directory
          mkdir -p ~/agent_games
          cd ~/agent_games
          
          # Copy validation file
          if [ -f ~/validation_players.py ]; then
            mkdir -p backend/games/lineup4
            cp ~/validation_players.py backend/games/lineup4/validation_players.py
          fi
          
          # Update code
          if [ -d ".git" ]; then
            git fetch --all && git reset --hard origin/main
          else
            git clone --depth 1 https://github.com/SanjinDedic/agent_games.git .
          fi
          
          # Create environment file
          cat > .env << EOF
          SERVICE_TOKEN=${{ secrets.SERVICE_TOKEN }}
          SECRET_KEY=${{ secrets.SECRET_KEY }}
          DATABASE_URL=postgresql://${{ secrets.POSTGRES_USER }}:${{ secrets.POSTGRES_PASSWORD }}@postgres:5432/${{ secrets.DB_NAME }}
          POSTGRES_USER=${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
          DB_NAME=${{ secrets.DB_NAME }}
          TEST_DB_NAME=${{ secrets.TEST_DB_NAME }}
          EOF
          
          # Deploy with Docker Compose
          docker compose --profile prod down || true
          docker compose --profile prod up --build --detach --wait
          
          # Verify deployment
          timeout 60s bash -c 'until curl -sf http://localhost:8000/health; do sleep 2; done'
          
          echo "Deployment completed successfully"
        ENDSSH