name: Test, Coverage and Deploy

on:
  push:
    branches:
      - main
    paths:
      - 'backend/**'
      - 'pyproject.toml'
      - 'requirements.txt'
  pull_request:
    branches:
      - main
    paths:
      - 'backend/**'
      - 'pyproject.toml'
      - 'requirements.txt'

jobs:
  test_and_coverage:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python 3.12
      uses: actions/setup-python@v3
      with:
        python-version: 3.12

    - name: Debug directory contents
      run: |
        echo "Current directory:"
        pwd
        echo "Contents:"
        ls -la
        echo "Backend directory contents:"
        ls -la backend/

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-asyncio httpx pytest-cov
        pip install -r backend/requirements.txt

    - name: Run tests with coverage
      run: |
        pytest --cov=backend --cov-report=xml --cov-report=term backend/tests/

    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v4.0.1
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        slug: SanjinDedic/agent_games
        directory: .
        flags: backend
        fail_ci_if_error: true
        verbose: true

  deploy:
    needs: test_and_coverage
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Deploy to EC2
      env:
        HOST: ${{ secrets.EC2_HOST }}
        USERNAME: ${{ secrets.EC2_USERNAME }}
        KEY: ${{ secrets.EC2_PRIVATE_KEY }}
        SERVICE_TOKEN: ${{ secrets.SERVICE_TOKEN }}
        SECRET_KEY: ${{ secrets.SECRET_KEY }}
      run: |
        mkdir -p ~/.ssh
        echo "$KEY" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh -o StrictHostKeyChecking=no $USERNAME@$HOST "bash -s" << 'ENDSSH' "$SERVICE_TOKEN" "$SECRET_KEY"
          SERVICE_TOKEN=$1
          SECRET_KEY=$2
          
          echo "Starting deployment..."
          
          # Ensure Docker is running
          if ! sudo systemctl is-active --quiet docker; then
            echo "Starting Docker service..."
            sudo systemctl start docker
          fi

          # Setup directories
          mkdir -p ~/main_application/agent_games
          cd ~/main_application/agent_games

          # Clean old deployment
          sudo docker system prune -f
          sudo docker image prune -af
          
          # Clone and copy files
          tmp_dir=$(mktemp -d)
          git clone --depth 1 https://github.com/SanjinDedic/agent_games.git "$tmp_dir"
          
          # Copy all required files with correct structure
          cp -r "$tmp_dir/backend" .
          cp "$tmp_dir/pyproject.toml" .
          cp "$tmp_dir/requirements.txt" .

          # Clean up temporary directory
          rm -rf "$tmp_dir"

          # Build Docker containers
          cd backend
          
          echo "Building simulator container..."
          sudo docker build -t simulator -f docker_utils/dockerfiles/simulator.dockerfile .
          
          echo "Building validator container..."
          sudo docker build -t validator -f docker_utils/dockerfiles/validator.dockerfile .
          
          # Stop any existing containers
          sudo docker stop validator simulator || true
          sudo docker rm validator simulator || true
          
          # Start new containers with environment variables
          sudo docker run -d --name validator \
            --network=host \
            -v $(pwd):/agent_games/backend:ro \
            -e SERVICE_TOKEN="$SERVICE_TOKEN" \
            -e SECRET_KEY="$SECRET_KEY" \
            validator

          sudo docker run -d --name simulator \
            --network=host \
            -v $(pwd):/agent_games/backend:ro \
            -e SERVICE_TOKEN="$SERVICE_TOKEN" \
            -e SECRET_KEY="$SECRET_KEY" \
            simulator

          # Restart the Agent Games service using PM2
          cd ~/main_application
          pm2 restart Agent_Games
          
          # Debug line to confirm successful deployment
          touch successful_deployment
          echo "deploy successful" > successful_deployment
          
          # Echo docker container status
          echo "Docker container status:"
          sudo docker ps | grep -E 'validator|simulator'
          
          # List directory structure for debugging
          echo "Final directory structure:"
          ls -R ~/main_application/agent_games/
          
          echo "Deployment completed"
        ENDSSH