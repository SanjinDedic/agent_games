# Name: Deploy to EC2
# Description: This GitHub Actions workflow automates the deployment process to an EC2 instance.
# It runs on every push to the main branch and performs the following tasks:
#   1. Checks out the latest code from the repository
#   2. Connects to the EC2 instance via SSH
#   3. Checks if Docker is installed, and installs it if not present
#   4. Ensures Docker is running and updates to the required version if necessary
#   5. Pulls the latest Docker image for the application
#   6. Updates the application code on the EC2 instance
#   7. Restarts the application using PM2
#
# Prerequisites:
#   - EC2 instance must be set up with the necessary permissions
#   - GitHub repository secrets must be configured with EC2 connection details
#   - PM2 should be installed on the EC2 instance to manage the Node.js application

name: Deploy to EC2

on:
  push:
    branches:
      - main
    paths:
      - 'backend/**'

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Deploy to EC2
      env:
        HOST: ${{ secrets.EC2_HOST }}
        USERNAME: ${{ secrets.EC2_USERNAME }}
        KEY: ${{ secrets.EC2_PRIVATE_KEY }}
      run: |
        mkdir -p ~/.ssh
        echo "$KEY" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh -o StrictHostKeyChecking=no $USERNAME@$HOST '
          # Check if Docker is installed and running
          if ! command -v docker &> /dev/null; then
            echo "Docker not found. Installing Docker..."
            sudo apt-get update
            sudo apt-get install -y docker.io
            sudo systemctl start docker
            sudo systemctl enable docker
          else
            echo "Docker is already installed."
          fi

          # Ensure Docker is running
          if ! sudo systemctl is-active --quiet docker; then
            echo "Starting Docker service..."
            sudo systemctl start docker
          fi

          mkdir -p ~/agent_games

          cd ~/agent_games
        
          # If the directory is not empty, pull the latest changes; otherwise, clone only the backend contents
          if [ "$(ls -A .)" ]; then
            echo "Directory is not empty. Pulling latest changes..."
            git pull origin main --recurse-submodules
          else
            echo "Directory is empty. Cloning backend contents from the repository..."
            git init
            git remote add origin https://github.com/SanjinDedic/agent_games.git
            git config core.sparseCheckout true
            echo "backend/*" >> .git/info/sparse-checkout
            echo "!backend/" >> .git/info/sparse-checkout  # This line tells git to exclude the backend folder itself, but include its contents
            git pull origin main --recurse-submodules
          fi

          if [ -d "venv" ]; then
            docker build -t run-with-docker .
            sudo systemctl restart Agent_Games_Service
          else
              cd /server_deployment
              sudo ./configure_python.sh
              sudo ./configure_service.sh
              cd ..
              docker build -t run-with-docker .
          fi
